     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式	
     5 00000000                                 [INSTRSET "i486p"]				; 使用到486为止的指令
     6 00000000                                 [BITS 32]						; 制作32位模式用的机器语言
     7 00000000                                 [FILE "naskfunc.nas"]			; 源程序文件名
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt,_io_cli,_io_sti,_io_stihlt
    10 00000000                                 		GLOBAL  _io_in8,_io_in16,_io_in32
    11 00000000                                 		GLOBAL  _io_out8,_io_out16,_io_out32
    12 00000000                                 		GLOBAL  _io_load_eflags,_io_store_eflags
    13 00000000                                 
    14 00000000                                 
    15                                          [SECTION .text]		; 目标文件中写了这些后再写函数
    16 00000000                                 
    17 00000000                                 _io_hlt:	; void io_hlt(void);
    18 00000000 F4                              		HLT
    19 00000001 C3                              		RET
    20 00000002                                 _io_cli:	; void io_cli(void);
    21 00000002 FA                              		CLI
    22 00000003 C3                              		RET
    23 00000004                                 _io_STI:	; void io_sti(void);
    24 00000004 FB                              		STI
    25 00000005 C3                              		RET
    26 00000006                                 _io_stihlt:	; void io_stihlt(void);
    27 00000006 FB                              		STI
    28 00000007 F4                              		HLT
    29 00000008 C3                              		RET
    30 00000009                                 _io_in8:	; int io_in8(int port);
    31 00000009 8B 54 24 04                     		MOV	EDX,[ESP+4]	;port
    32 0000000D B8 00000000                     		MOV EAX,0
    33 00000012 EC                              		IN AL,DX
    34 00000013 C3                              		RET
    35 00000014                                 _io_in16: 	; int io_in16(int port);
    36 00000014 8B 54 24 04                     		MOV EDX,[ESP+4]
    37 00000018 B8 00000000                     		MOV EAX,0
    38 0000001D 66 ED                           		IN AX,DX
    39 0000001F C3                              		RET
    40 00000020                                 _io_in32:	; int io_in32(int port);
    41 00000020 8B 54 24 04                     		MOV EDX,[ESP+4]
    42 00000024                                 		IN EAX DX
      >> [ERROR #002] parameter error.
    43 00000024 C3                              		RET
    44 00000025                                 _io_out8:	; void io_out8(int port,int data);
    45 00000025 8B 54 24 04                     		MOV EDX,[ESP+4]	;port
    46 00000029 8A 44 24 08                     		MOV AL,[ESP+8]  ;data
    47 0000002D 66 EF                           		OUT DX,AX
    48 0000002F C3                              		RET
    49 00000030                                 _io_out16:  ; void io_out16(int port,int data);
    50 00000030 8B 54 24 04                     		MOV EDX,[ESP+4] ;port
    51 00000034 8B 44 24 08                     		MOV EAX,[ESP+8] ;data
    52 00000038 66 EF                           		OUT DX,AX
    53 0000003A C3                              		RET
    54 0000003B                                 _io_out32:  ; void io_out32(int port,int data);
    55 0000003B 8B 54 24 04                     		MOV EDX,[ESP+4] ;port
    56 0000003F 8B 44 24 08                     		MOV EAX,[ESP+8] ;port
    57 00000043 EF                              		OUT DX,EAX
    58 00000044 C3                              		RET
    59 00000045                                 _io_load_eflags:  ; int io_load_eflags(void);
    60 00000045 9C                              		PUSHFD	  ; 指 PUSH EFLAGS
    61 00000046 58                              		POP EAX
    62 00000047 C3                              		RET
    63 00000048                                 _io_store_eflags: ; void io_store_eflags(int eflags);
    64 00000048 8B 44 24 04                     		MOV EAX,[ESP+4]
    65 0000004C 50                              		PUSH EAX
    66 0000004D 9D                              		POPFD	  ; 指POP EFLAGS
    67 0000004E C3                              		RET